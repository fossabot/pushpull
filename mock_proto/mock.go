// Code generated by MockGen. DO NOT EDIT.
// Source: proto/pushpull.pb.go

// Package mock_proto is a generated GoMock package.
package mock_proto

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	empty "github.com/golang/protobuf/ptypes/empty"
	proto "github.com/vardius/pushpull/proto"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
)

// MockPushPullClient is a mock of PushPullClient interface
type MockPushPullClient struct {
	ctrl     *gomock.Controller
	recorder *MockPushPullClientMockRecorder
}

// MockPushPullClientMockRecorder is the mock recorder for MockPushPullClient
type MockPushPullClientMockRecorder struct {
	mock *MockPushPullClient
}

// NewMockPushPullClient creates a new mock instance
func NewMockPushPullClient(ctrl *gomock.Controller) *MockPushPullClient {
	mock := &MockPushPullClient{ctrl: ctrl}
	mock.recorder = &MockPushPullClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPushPullClient) EXPECT() *MockPushPullClientMockRecorder {
	return m.recorder
}

// Push mocks base method
func (m *MockPushPullClient) Push(ctx context.Context, in *proto.PushRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Push", varargs...)
	ret0, _ := ret[0].(*empty.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Push indicates an expected call of Push
func (mr *MockPushPullClientMockRecorder) Push(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Push", reflect.TypeOf((*MockPushPullClient)(nil).Push), varargs...)
}

// Pull mocks base method
func (m *MockPushPullClient) Pull(ctx context.Context, in *proto.PullRequest, opts ...grpc.CallOption) (proto.PushPull_PullClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Pull", varargs...)
	ret0, _ := ret[0].(proto.PushPull_PullClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Pull indicates an expected call of Pull
func (mr *MockPushPullClientMockRecorder) Pull(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pull", reflect.TypeOf((*MockPushPullClient)(nil).Pull), varargs...)
}

// MockPushPull_PullClient is a mock of PushPull_PullClient interface
type MockPushPull_PullClient struct {
	ctrl     *gomock.Controller
	recorder *MockPushPull_PullClientMockRecorder
}

// MockPushPull_PullClientMockRecorder is the mock recorder for MockPushPull_PullClient
type MockPushPull_PullClientMockRecorder struct {
	mock *MockPushPull_PullClient
}

// NewMockPushPull_PullClient creates a new mock instance
func NewMockPushPull_PullClient(ctrl *gomock.Controller) *MockPushPull_PullClient {
	mock := &MockPushPull_PullClient{ctrl: ctrl}
	mock.recorder = &MockPushPull_PullClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPushPull_PullClient) EXPECT() *MockPushPull_PullClientMockRecorder {
	return m.recorder
}

// Recv mocks base method
func (m *MockPushPull_PullClient) Recv() (*proto.PullResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*proto.PullResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv
func (mr *MockPushPull_PullClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockPushPull_PullClient)(nil).Recv))
}

// Header mocks base method
func (m *MockPushPull_PullClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header
func (mr *MockPushPull_PullClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockPushPull_PullClient)(nil).Header))
}

// Trailer mocks base method
func (m *MockPushPull_PullClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer
func (mr *MockPushPull_PullClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockPushPull_PullClient)(nil).Trailer))
}

// CloseSend mocks base method
func (m *MockPushPull_PullClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend
func (mr *MockPushPull_PullClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockPushPull_PullClient)(nil).CloseSend))
}

// Context mocks base method
func (m *MockPushPull_PullClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context
func (mr *MockPushPull_PullClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockPushPull_PullClient)(nil).Context))
}

// SendMsg mocks base method
func (m_2 *MockPushPull_PullClient) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg
func (mr *MockPushPull_PullClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockPushPull_PullClient)(nil).SendMsg), m)
}

// RecvMsg mocks base method
func (m_2 *MockPushPull_PullClient) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg
func (mr *MockPushPull_PullClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockPushPull_PullClient)(nil).RecvMsg), m)
}

// MockPushPullServer is a mock of PushPullServer interface
type MockPushPullServer struct {
	ctrl     *gomock.Controller
	recorder *MockPushPullServerMockRecorder
}

// MockPushPullServerMockRecorder is the mock recorder for MockPushPullServer
type MockPushPullServerMockRecorder struct {
	mock *MockPushPullServer
}

// NewMockPushPullServer creates a new mock instance
func NewMockPushPullServer(ctrl *gomock.Controller) *MockPushPullServer {
	mock := &MockPushPullServer{ctrl: ctrl}
	mock.recorder = &MockPushPullServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPushPullServer) EXPECT() *MockPushPullServerMockRecorder {
	return m.recorder
}

// Push mocks base method
func (m *MockPushPullServer) Push(arg0 context.Context, arg1 *proto.PushRequest) (*empty.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Push", arg0, arg1)
	ret0, _ := ret[0].(*empty.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Push indicates an expected call of Push
func (mr *MockPushPullServerMockRecorder) Push(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Push", reflect.TypeOf((*MockPushPullServer)(nil).Push), arg0, arg1)
}

// Pull mocks base method
func (m *MockPushPullServer) Pull(arg0 *proto.PullRequest, arg1 proto.PushPull_PullServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pull", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Pull indicates an expected call of Pull
func (mr *MockPushPullServerMockRecorder) Pull(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pull", reflect.TypeOf((*MockPushPullServer)(nil).Pull), arg0, arg1)
}

// MockPushPull_PullServer is a mock of PushPull_PullServer interface
type MockPushPull_PullServer struct {
	ctrl     *gomock.Controller
	recorder *MockPushPull_PullServerMockRecorder
}

// MockPushPull_PullServerMockRecorder is the mock recorder for MockPushPull_PullServer
type MockPushPull_PullServerMockRecorder struct {
	mock *MockPushPull_PullServer
}

// NewMockPushPull_PullServer creates a new mock instance
func NewMockPushPull_PullServer(ctrl *gomock.Controller) *MockPushPull_PullServer {
	mock := &MockPushPull_PullServer{ctrl: ctrl}
	mock.recorder = &MockPushPull_PullServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPushPull_PullServer) EXPECT() *MockPushPull_PullServerMockRecorder {
	return m.recorder
}

// Send mocks base method
func (m *MockPushPull_PullServer) Send(arg0 *proto.PullResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send
func (mr *MockPushPull_PullServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockPushPull_PullServer)(nil).Send), arg0)
}

// SetHeader mocks base method
func (m *MockPushPull_PullServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader
func (mr *MockPushPull_PullServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockPushPull_PullServer)(nil).SetHeader), arg0)
}

// SendHeader mocks base method
func (m *MockPushPull_PullServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader
func (mr *MockPushPull_PullServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockPushPull_PullServer)(nil).SendHeader), arg0)
}

// SetTrailer mocks base method
func (m *MockPushPull_PullServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer
func (mr *MockPushPull_PullServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockPushPull_PullServer)(nil).SetTrailer), arg0)
}

// Context mocks base method
func (m *MockPushPull_PullServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context
func (mr *MockPushPull_PullServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockPushPull_PullServer)(nil).Context))
}

// SendMsg mocks base method
func (m_2 *MockPushPull_PullServer) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg
func (mr *MockPushPull_PullServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockPushPull_PullServer)(nil).SendMsg), m)
}

// RecvMsg mocks base method
func (m_2 *MockPushPull_PullServer) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg
func (mr *MockPushPull_PullServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockPushPull_PullServer)(nil).RecvMsg), m)
}
