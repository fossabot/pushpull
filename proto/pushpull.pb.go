// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pushpull.proto

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// PushRequest is passed when pushing to the queue
type PushRequest struct {
	Topic                string   `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	Payload              []byte   `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PushRequest) Reset()         { *m = PushRequest{} }
func (m *PushRequest) String() string { return proto.CompactTextString(m) }
func (*PushRequest) ProtoMessage()    {}
func (*PushRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ecf1922d904660f, []int{0}
}

func (m *PushRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PushRequest.Unmarshal(m, b)
}
func (m *PushRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PushRequest.Marshal(b, m, deterministic)
}
func (m *PushRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PushRequest.Merge(m, src)
}
func (m *PushRequest) XXX_Size() int {
	return xxx_messageInfo_PushRequest.Size(m)
}
func (m *PushRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PushRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PushRequest proto.InternalMessageInfo

func (m *PushRequest) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *PushRequest) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

// PullRequest is passed when listing for new event in queue
type PullRequest struct {
	Topic                string   `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PullRequest) Reset()         { *m = PullRequest{} }
func (m *PullRequest) String() string { return proto.CompactTextString(m) }
func (*PullRequest) ProtoMessage()    {}
func (*PullRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ecf1922d904660f, []int{1}
}

func (m *PullRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PullRequest.Unmarshal(m, b)
}
func (m *PullRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PullRequest.Marshal(b, m, deterministic)
}
func (m *PullRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PullRequest.Merge(m, src)
}
func (m *PullRequest) XXX_Size() int {
	return xxx_messageInfo_PullRequest.Size(m)
}
func (m *PullRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PullRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PullRequest proto.InternalMessageInfo

func (m *PullRequest) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

// PullResponse object
type PullResponse struct {
	Payload              []byte   `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PullResponse) Reset()         { *m = PullResponse{} }
func (m *PullResponse) String() string { return proto.CompactTextString(m) }
func (*PullResponse) ProtoMessage()    {}
func (*PullResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ecf1922d904660f, []int{2}
}

func (m *PullResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PullResponse.Unmarshal(m, b)
}
func (m *PullResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PullResponse.Marshal(b, m, deterministic)
}
func (m *PullResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PullResponse.Merge(m, src)
}
func (m *PullResponse) XXX_Size() int {
	return xxx_messageInfo_PullResponse.Size(m)
}
func (m *PullResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PullResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PullResponse proto.InternalMessageInfo

func (m *PullResponse) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func init() {
	proto.RegisterType((*PushRequest)(nil), "proto.PushRequest")
	proto.RegisterType((*PullRequest)(nil), "proto.PullRequest")
	proto.RegisterType((*PullResponse)(nil), "proto.PullResponse")
}

func init() {
	proto.RegisterFile("pushpull.proto", fileDescriptor_4ecf1922d904660f)
}

var fileDescriptor_4ecf1922d904660f = []byte{
	// 222 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x90, 0x3f, 0x4f, 0x85, 0x30,
	0x14, 0xc5, 0x53, 0xe3, 0xf3, 0xcf, 0xf5, 0xe9, 0x50, 0xcd, 0x0b, 0xc1, 0x85, 0xe0, 0x82, 0x4b,
	0x51, 0x9c, 0x5d, 0x48, 0xdc, 0x09, 0xdf, 0x00, 0xb0, 0x82, 0xc9, 0xd5, 0x5e, 0x68, 0x3b, 0xf0,
	0xed, 0x4d, 0x69, 0x4a, 0x60, 0x71, 0x6a, 0x4f, 0x73, 0xce, 0xc9, 0xef, 0x14, 0xee, 0xc8, 0xea,
	0x81, 0x2c, 0xa2, 0xa0, 0x49, 0x19, 0xc5, 0x0f, 0xcb, 0x11, 0x3f, 0xf6, 0x4a, 0xf5, 0x28, 0xf3,
	0x45, 0xb5, 0xf6, 0x2b, 0x97, 0x3f, 0x64, 0x66, 0xef, 0x49, 0xdf, 0xe1, 0xa6, 0xb2, 0x7a, 0xa8,
	0xe5, 0x68, 0xa5, 0x36, 0xfc, 0x01, 0x0e, 0x46, 0xd1, 0x77, 0x17, 0xb1, 0x84, 0x65, 0xd7, 0xb5,
	0x17, 0x3c, 0x82, 0x4b, 0x6a, 0x66, 0x54, 0xcd, 0x67, 0x74, 0x96, 0xb0, 0xec, 0x58, 0x07, 0x99,
	0x3e, 0xb9, 0x38, 0xe2, 0xbf, 0xf1, 0x34, 0x83, 0xa3, 0x37, 0x69, 0x52, 0xbf, 0x5a, 0x6e, 0xeb,
	0xd8, 0xae, 0xae, 0x18, 0xe1, 0xca, 0xd1, 0x38, 0x37, 0x2f, 0xe0, 0xdc, 0xdd, 0x39, 0xf7, 0xa4,
	0x62, 0x83, 0x19, 0x9f, 0x84, 0xdf, 0x24, 0xc2, 0x26, 0xf1, 0xe1, 0x36, 0xf1, 0x57, 0x97, 0x41,
	0xdc, 0x64, 0x56, 0xb6, 0xf8, 0x7e, 0xf7, 0xe6, 0x51, 0x5e, 0x58, 0xf9, 0x0c, 0xa7, 0xf5, 0xdb,
	0xfa, 0x89, 0x3a, 0x11, 0x54, 0x79, 0x1b, 0x50, 0x2a, 0x97, 0xab, 0x58, 0x7b, 0xb1, 0x14, 0xbc,
	0xfd, 0x05, 0x00, 0x00, 0xff, 0xff, 0x5a, 0xe8, 0x9f, 0x9b, 0x68, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// PushPullClient is the client API for PushPull service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PushPullClient interface {
	Push(ctx context.Context, in *PushRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	Pull(ctx context.Context, in *PullRequest, opts ...grpc.CallOption) (PushPull_PullClient, error)
}

type pushPullClient struct {
	cc grpc.ClientConnInterface
}

func NewPushPullClient(cc grpc.ClientConnInterface) PushPullClient {
	return &pushPullClient{cc}
}

func (c *pushPullClient) Push(ctx context.Context, in *PushRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/proto.PushPull/Push", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pushPullClient) Pull(ctx context.Context, in *PullRequest, opts ...grpc.CallOption) (PushPull_PullClient, error) {
	stream, err := c.cc.NewStream(ctx, &_PushPull_serviceDesc.Streams[0], "/proto.PushPull/Pull", opts...)
	if err != nil {
		return nil, err
	}
	x := &pushPullPullClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PushPull_PullClient interface {
	Recv() (*PullResponse, error)
	grpc.ClientStream
}

type pushPullPullClient struct {
	grpc.ClientStream
}

func (x *pushPullPullClient) Recv() (*PullResponse, error) {
	m := new(PullResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PushPullServer is the server API for PushPull service.
type PushPullServer interface {
	Push(context.Context, *PushRequest) (*empty.Empty, error)
	Pull(*PullRequest, PushPull_PullServer) error
}

// UnimplementedPushPullServer can be embedded to have forward compatible implementations.
type UnimplementedPushPullServer struct {
}

func (*UnimplementedPushPullServer) Push(ctx context.Context, req *PushRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Push not implemented")
}
func (*UnimplementedPushPullServer) Pull(req *PullRequest, srv PushPull_PullServer) error {
	return status.Errorf(codes.Unimplemented, "method Pull not implemented")
}

func RegisterPushPullServer(s *grpc.Server, srv PushPullServer) {
	s.RegisterService(&_PushPull_serviceDesc, srv)
}

func _PushPull_Push_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PushPullServer).Push(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.PushPull/Push",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PushPullServer).Push(ctx, req.(*PushRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PushPull_Pull_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PullRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PushPullServer).Pull(m, &pushPullPullServer{stream})
}

type PushPull_PullServer interface {
	Send(*PullResponse) error
	grpc.ServerStream
}

type pushPullPullServer struct {
	grpc.ServerStream
}

func (x *pushPullPullServer) Send(m *PullResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _PushPull_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.PushPull",
	HandlerType: (*PushPullServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Push",
			Handler:    _PushPull_Push_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Pull",
			Handler:       _PushPull_Pull_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pushpull.proto",
}
